#!/bin/python3

import sys
import csv
import time
import signal
import datetime
import argparse
import serial
import pynmea2

import numpy as np
from matplotlib import pyplot as plt
import SoapySDR
from SoapySDR import *

def read_gps(ser):
    trying = True
    fix = "no"
    lat = "0";
    lat_dir = ""
    lon = "0"
    lon_dir = ""
    timestamp = ""

    while(trying):
        try:
            line = ser.readline()
            newline = str(line, 'utf-8', errors='ignore')
            if "GGA" in newline:
                data = pynmea2.parse(newline)
                timestamp = data.timestamp
                lat, lon, alt = data.latitude, data.longitude, data.altitude
                lat_dir, lon_dir, num_sats = data.lat_dir, data.lon_dir, data.num_sats
                gps_qual = data.gps_qual
                if gps_qual != 0:
                    fix = "yes"
                    trying = False;
                else:
                    fix = "no"
                    trying = False;

        except serial.SerialException as e:
            trying = False;

        except serial.SerialTimeoutException as e:
            trying = False;

    ret_lat = "{:4.6}".format(lat) + " " +lat_dir
    ret_lon = "{:4.6}".format(lon) + " " + lon_dir
    return fix, ret_lat, ret_lon, str(timestamp) 


def handler(signum, frame):
    global running 

    print("ending...")
    running = False
    # Stop streaming
    sdr.deactivateStream(rx_stream)
    sdr.closeStream(rx_stream)
    exit(1)

def main(rx_chan, fs, bw, freq, port, looptime):
    ############################################################################################
    # Settings
    ############################################################################################
    if (port != None):
        print(port) 
        ser = serial.Serial(port, BAUD, timeout=2.0)

    running = True

    # Data transfer settings
    N = 16384               # Number of complex samples per transfer
    use_agc = False          # Use or don't use the AGC
    timeout_us = int(10e6)
    rx_bits = 12
    
    if (port == None):
        header = "Time(UTC), Peak Frequency (MHz), Peak Power (dBm)\n"
    else:
        header = "Time(UTC), GPS Sat Lock, Latitude, Longitude, Peak Frequency (MHz), Peak Power (dBm)\n"


    signal.signal(signal.SIGINT, handler)

    sdr = SoapySDR.Device()

    # Create data buffer and start streaming samples to it
    rx_buff = np.empty(2 * N, np.int16)                 # Create memory buffer for data stream

    f = open('output.csv', 'w', encoding='UTF8') 
    out = "Sample Rate, " + "{:10.0f}".format(fs) + "\n"
    f.write(out)
    out = "Bandwidth, "+ "{:10.0f}".format(bw) + "\n"

    f.write(out)
    out = "Freq, " + "{:10.0f}".format(freq) + "\n\n"

    f.write(out)
    f.write(header)

    ############################################################################################
    # Receive Signal
    ############################################################################################
    SoapySDR.setLogLevel(SOAPY_SDR_ERROR)

    sdr.setSampleRate(SOAPY_SDR_RX, rx_chan, fs)            # Set sample rate
    sdr.setBandwidth(SOAPY_SDR_RX, rx_chan, bw)             # Set sample rate
    sdr.setGain(SOAPY_SDR_RX, rx_chan, 0)                   # Set the gain mode
    sdr.setFrequency(SOAPY_SDR_RX, rx_chan, freq)           # Tune the LO

    rx_stream = sdr.setupStream(SOAPY_SDR_RX, SOAPY_SDR_CS16, [rx_chan])  # Setup data stream


    while running:
        sdr.activateStream(rx_stream)  # this turns the radio on
        # Read the samples from the data buffer
        sr = sdr.readStream(rx_stream, [rx_buff], N, timeoutUs=timeout_us)
        sdr.deactivateStream(rx_stream)
        rc = sr.ret # number of samples read or the error code
        assert rc == N, 'Error Reading Samples from Device (error code = %d)!' % rc


        ############################################################################################
        # Plot Signal
        ############################################################################################
        # Convert interleaved shorts (received signal) to numpy.complex64 normalized between [-1, 1]
        s0 = rx_buff.astype(float) / np.power(2.0, rx_bits-1)
        s = (s0[::2] + 1j*s0[1::2])

        # Take the fourier transform of the signal and perform FFT Shift
        S = np.fft.fftshift(np.fft.fft(s, N) / N)
        S1 = 20*np.log10(np.abs(S))

        # Get the maximum element from a Numpy array
        maxElement = np.amax(S1)

        result = np.where(S1 == np.amax(S1))

        f_mhz = (freq + (np.arange(0, fs, fs/N) - (fs/2) + (fs/N))) / 1e6
        peak_freq = f_mhz[result[0]]
        
        now =    datetime.datetime.now().strftime("%d-%b-%Y (%H:%M:%S)")
        print(now)
 
        if (port != None):
            fix, lat, lon, timestamp = read_gps(ser);
            print("gps lock:", fix, "latitude:", lat, "longitude:", lon)

        print('Max Power (dBm): ', "{:.0f}".format(maxElement))
        print('at Freq (MHz):', "{:10.4f}".format(peak_freq[0]))
      
       
        if (port == None):
            row = now + ', ' + "{:10.4f}".format(peak_freq[0]) + ', ' + "{:.0f}".format(maxElement) + ' \n'
        else:
            row = now + ', ' + fix + ', '  + lat + ', '  + lon + ', '  + "{:10.4f}".format(peak_freq[0]) + ', ' + "{:.0f}".format(maxElement) + ' \n'
        print("")
        f.write(row)
        time.sleep(looptime)


def parse_command_line_arguments():
    """ Create command line options """
    help_formatter = argparse.ArgumentDefaultsHelpFormatter
    parser = argparse.ArgumentParser(description='scan for peaks, build a csv file ',
                                     formatter_class=help_formatter)
    parser.add_argument('-c', type=int, required=False, dest='chan',
                        default=0, help='Channel Number [0 or 1]')
    parser.add_argument('-s', type=float, required=False, dest='fs',
                        default=10e6, help='Sample Rate')
    parser.add_argument('-bs', type=float, required=False, dest='bw',
                        default=10e6, help='Bandwidth')
    parser.add_argument('-f', type=float, required=False, dest='freq',
                        default=100e7, help='Lo Frequency')
    parser.add_argument('-p', required=False, dest='port',
                        default=None, help='GPS Port')
    parser.add_argument('-t', type=int, required=False, dest='looptime',
                        default=3, help='Time between tests')
    return parser.parse_args(sys.argv[1:])


if __name__ == '__main__':

    PORT = "/dev/ttymxc0"
    BAUD = 9600

    pars = parse_command_line_arguments()
    print(pars.chan, pars.fs, pars.bw, pars.freq, pars.port, pars.looptime)

    main(pars.chan, pars.fs, pars.bw, pars.freq, pars.port, pars.looptime)
f
