#!/bin/python3
#---------Imports

import time
import RFExplorer
from RFExplorer import RFE_Common
import math
import array as arr



from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

import tkinter as tk
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation
#---------End of imports



from tkinter import Frame,Label,Entry,Button


SERIALPORT = None    #serial port identifier, use None to autodetect
BAUDRATE = 500000

SPAN_SIZE_MHZ = 50           #Initialize settings
START_SCAN_MHZ = 1000
STOP_SCAN_MHZ = 1200
SWEEPPOINTS = 112
SWEEPDATA = (SWEEPPOINTS + 1) * 16
RESET = True
lasti = 10000

class Window(Frame):

    def __init__(self, master = None):
        Frame.__init__(self, master)
        self.master = master
        self.init_window()

    def ControlSettings(self, objAnalazyer):
        """This functions check user settings
        """
        SpanSizeTemp = None
        StartFreqTemp = None
        StopFreqTemp =  None

        #print user settings
        print("User settings:" + "Span: " + str(SPAN_SIZE_MHZ) +"MHz"+  " - " + "Start freq: " + str(START_SCAN_MHZ) +"MHz"+" - " + "Stop freq: " + str(STOP_SCAN_MHZ) + "MHz")

        #Control maximum Span size
        if(objAnalazyer.MaxSpanMHZ <= SPAN_SIZE_MHZ):
            print("Max Span size: " + str(objAnalazyer.MaxSpanMHZ)+"MHz")
        else:
            objAnalazyer.SpanMHZ = SPAN_SIZE_MHZ
            SpanSizeTemp = objAnalazyer.SpanMHZ
        if(SpanSizeTemp):
            #Control minimum start frequency
            if(objAnalazyer.MinFreqMHZ > START_SCAN_MHZ):
                print("Min Start freq: " + str(objAnalazyer.MinFreqMHZ)+"MHz")
            else:
                objAnalazyer.StartFrequencyMHZ = START_SCAN_MHZ
                StartFreqTemp = objAnalazyer.StartFrequencyMHZ
            if(StartFreqTemp):
                #Control maximum stop frequency
                if(objAnalazyer.MaxFreqMHZ < STOP_SCAN_MHZ):
                    print("Max Start freq: " + str(objAnalazyer.MaxFreqMHZ)+"MHz")
                else:
                    if((StartFreqTemp + SpanSizeTemp) > STOP_SCAN_MHZ):
                        print("Max Stop freq (START_SCAN_MHZ + SPAN_SIZE_MHZ): " + str(STOP_SCAN_MHZ) +"MHz")
                    else:
                        StopFreqTemp = (StartFreqTemp + SpanSizeTemp)

        return SpanSizeTemp, StartFreqTemp, StopFreqTemp

    def GetData(self, sweepdata, tot):
        amp = arr.array('f',[])
        freq = arr.array('f',[])
        for nDataPoint in range(tot):
            val = sweepdata.GetAmplitudeDBM(nDataPoint, None, False)
            amp.append(val)
#            print(nDataPoint, val) 
            freq.append(sweepdata.GetFrequencyMHZ(nDataPoint))
#        print(len(freq), freq[0])
#        print(len(amp), amp[0], max(amp), min(amp))

        return freq, amp


    def animate(self,i):
        self.objSweep=None
        self.objRFE.ProcessReceivedString(True);
        num = self.objRFE.SweepData.Count - 1
        if self.numitems != num:
            self.numitems = num
            if (self.numitems > 0):
                objSweep=self.objRFE.SweepData.GetData(self.numitems)
                tot=objSweep.TotalDataPoints
#                print(self.numitems, tot)
                self.freq, self.amp = self.GetData(objSweep, tot)
            
                self.line.set_ydata(self.amp)  # update the data

        return self.line,


    def init_window(self):
        self.objRFE = RFExplorer.RFECommunicator()

        self.objRFE.GetConnectedPorts()

        self.objRFE.VerboseLevel = 0
        self.master.title("Sig Analyzer")
        self.pack(fill='both', expand=1)     

        #Create the controls, note use of grid


#        tk.Label(self,text="Ana").grid(column=0, row=3)

        self.fig = plt.Figure()
        self.ax = self.fig.add_subplot(111)
        self.canvas = FigureCanvasTkAgg(self.fig, master=self)
#        self.canvas.get_tk_widget().grid(column=0,row=4)
        self.canvas.get_tk_widget().pack(side="top", fill='both', expand=True)

        #Connect to available port
        if (self.objRFE.ConnectPort(SERIALPORT, BAUDRATE)):
            if RESET:
                print("Resetting device...")
                #Reset the unit to start fresh
                self.objRFE.SendCommand("r")
                #Wait for unit to notify reset completed
                while(self.objRFE.IsResetEvent):
                    pass
                #Wait for unit to stabilize
                time.sleep(4)

            #Request RF Explorer configuration
            self.objRFE.SendCommand_RequestConfigData()

            #Wait to receive configuration and model details
            while(self.objRFE.ActiveModel == RFExplorer.RFE_Common.eModel.MODEL_NONE):
                self.objRFE.ProcessReceivedString(True)    #Process the received configuration

            #If object is an analyzer, we can scan for received sweeps
            if(self.objRFE.IsAnalyzer()):
#                self.objRFE.SendCommand_SweepDataPoints(SWEEPDATA)

                #Control settings
                SpanSize, StartFreq, StopFreq = self.ControlSettings(self.objRFE)

                if(SpanSize and StartFreq and StopFreq):
                    nInd = 0
                    #Set new configuration into device
                    self.objRFE.UpdateDeviceConfig(StartFreq, StopFreq)
                    self.objRFE.ProcessReceivedString(True);

                    self.objSweep=None

                    self.numitems = self.objRFE.SweepData.Count - 1
                    while (self.numitems == 0):
                        self.objRFE.ProcessReceivedString(True);
                        self.numitems = self.objRFE.SweepData.Count - 1

                        if (self.numitems>0):
                            self.objSweep=self.objRFE.SweepData.GetData(self.numitems)
                            tot=self.objSweep.TotalDataPoints
                            self.freq, self.amp = self.GetData(self.objSweep, tot)
                            self.line, = self.ax.plot(self.freq, self.amp)        
                            self.ax.axis([StartFreq, StopFreq, min(self.amp) - 10, 0 ])
                else:
                    print("Error: settings are wrong.\nPlease, change and try again")
            else:
                print("Error: This is a generator not analyzer")

        self.ani = animation.FuncAnimation(self.fig, self.animate, np.arange(1, 200), interval=25, blit=False)



def resize(event):
    print("widget", event.widget)
    print("height", event.height, "width", event.width)

    app.fig.subplots_adjust(left=0.05, bottom=0.07, right=0.95, top=0.95, wspace=0, hspace=0)


root = tk.Tk()
#root.bind("<Configure>", resize)
root.geometry("700x500")
app = Window(root)
tk.mainloop()
