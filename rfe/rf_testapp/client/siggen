#!/bin/python3

import sys
import os
import traceback
import time
import socket
import sys
import argparse
import subprocess

import tkinter as tk
from tkinter import ttk
from tkinter import *
from tkinter.messagebox import Message

import time
import math

from util import testapp
print(testapp.__file__)

HELP_DESCRIPTION = "run the siggen app"


"""
Power Table:
    0   -35.2
    1   -33.2
    2   -29.2
    3   -26.2
    4   -5.7
    5   -2.7
    6    0.3
    7   +2.8


"""

#---------------------------------------------------------
# global variables and initialization
#---------------------------------------------------------

# List of field labels
labels = [
    "Start Freq MHz:",
    "Power Level (0 - 7):",
    "Number of Steps:",
    "Freq Step in KHz:",
    "Step Time in ms:",
]

init_vals = [
    "997.0",
    "2",
    "10",
    "1000",
    "1000",
]

user_entry = []
usb_port = ''
current_state = ""

SERIALPORT = None    #serial port identifier, use None to autodetect
BAUDRATE = 500000

SPAN_SIZE_MHZ = 50           #Initialize settings
START_SCAN_MHZ = 50
STOP_SCAN_MHZ = 960
RESET = True
DEBUG = TRUE

span = 30
root = Tk(className='HappyName')
root.wm_title('Sidekiq Signal Generator')
current_frame = Frame(root)

def enterhandler(e):
    global current_state

    if DEBUG:
        print("enterhandler", current_state, e)

    if current_state == "get_port":
        go()
    elif current_state == "continuous_wave":
        continuous_power_on()
    elif current_state == "frequency_sweep":
        start_sweep()


def power_off():
    global on_button

    if DEBUG:
        print("power off")
    on_button.configure(bg = "#f0f0f0")

    test.sendStopGen()
    

def continuous_power_on():
    global cw_freq, cw_power, current_color, on_button

    current_color = "red"
    on_button.configure(bg= "red")
    
    if DEBUG:
        print("power on")

    frequency = cw_freq.get()
    if DEBUG:
        print("frequency str ", frequency)

    floatfreq = float(frequency) 

    intfreq = int(floatfreq)

    if DEBUG:
        print("float freq ", floatfreq, "int freq ", intfreq)

    power = int(cw_power.get())

    if power > 9 or power < 0:
        print("invalid power", power, "changing to 7")
        power = 7
    

    if DEBUG:
        print("power", power)


    test.sendStartCW(intfreq, span, power) 

def continuous_wave():
    global current_frame, cw_freq, cw_power, current_state, on_button
    
    current_state = "continuous_wave"

    if DEBUG:
        print("continuous wave")

    current_frame.destroy()
    root.geometry('550x200')
    current_frame = Frame(root)

    label = Label(master=current_frame, text="Frequency MHz: ", font=("Arial", 16))
    label.grid(row = 0, column = 0, padx = 20, pady = 10)
    cw_freq = Entry(master=current_frame, width = 10, font=("Ariel", 16))
    cw_freq.insert(0, "1000.0")
    cw_freq.focus_set()
    cw_freq.grid(row = 0, column = 1, padx = 20, pady = 10)

    label2 = Label(master=current_frame, text="Power (0-7) : ", font=("Arial", 16))
    label2.grid(row = 1, column = 0, padx = 20, pady = 10)
    cw_power = Entry(master=current_frame, width = 10, font=("Ariel", 16))
    cw_power.insert(0, "2")
    cw_power.grid(row = 1, column = 1, padx = 20, pady = 10)

    on_button = Button(current_frame, text = 'Power On') 
#    on_button.configure(font=("Arial", 16), command = lambda name= on_button: continuous_power_on(name) )
    on_button.configure(font=("Arial", 16), command = continuous_power_on )
    on_button.grid(row = 2, column = 0, sticky = W, padx = 20, pady = 10)
    Button(current_frame, text = 'Power Off', font=("Arial", 16), command = power_off).grid(row = 2, column = 1, sticky = W, padx = 20, pady = 10)
    Button(current_frame, text = 'Back', font=("Arial", 16), command = top_window).grid(row = 2, column = 2, sticky = W, padx = 20, pady = 10)
    current_frame.pack(fill="both", expand=True)

def start_sweep():
    global user_entry, current_color, on_button

    if DEBUG:
        print("start sweep")
    
    on_button.configure(bg= "red")
    current_color = "red"

    frequency = user_entry[0].get()

    if DEBUG:
        print("frequency str ", frequency)

    floatfreq = float(frequency)

    intfreq = int(floatfreq)

    if DEBUG:
        print("float freq ", floatfreq, "int freq ", intfreq)

    power = int(user_entry[1].get())
    if power > 9 or power < 0:
        print("invalid power", power, "changing to 7")
        power = 5

    
    steps = user_entry[2].get()

    step_width = user_entry[3].get()
    step_MHz = int(int(step_width) / 1000)

    step_time = user_entry[4].get()

    test.sendStartSweep(intfreq, power, steps, step_MHz, step_time, span) 
    
def clear():
    if DEBUG:
        print("clear")

    for idx, text in enumerate(labels):
        user_entry[idx].delete(0, END)



def frequency_sweep():
    global current_frame, user_entry, current_state, on_button

    current_state = "frequency_sweep"

    current_frame.destroy()
    root.geometry('750x350')
    frame = Frame(root)
    current_frame = frame

    user_entry = []

    # Loop over the list of field labels
    for idx, text in enumerate(labels):

        # Create a Label widget with the text from the labels list
        label = Label(current_frame, text=text, font=("Arial", 16))

        # Create an Entry widget
        user_entry.append(Entry(current_frame, width=20, font=("Ariel", 16)))

        user_entry[idx].insert(0, init_vals[idx])

        if idx == 0:
            user_entry[0].focus_set()

        # Use the grid geometry manager to place the Label and
        # Entry widgets in the row whose index is idx
        label.grid(row=idx, column=0, padx=10, pady=10, sticky="e")

        user_entry[idx].grid(row=idx, column=1, padx=10, pady=10)

    on_button = Button(current_frame, text = 'Start Sweep') 
    on_button.configure(font=("Arial", 16), command = start_sweep )
    on_button.grid(row = idx+1, column = 0, sticky = W, padx = 10, pady = 10)
    Button(current_frame, text = 'Stop Sweep', font=("Arial", 16), command = power_off).grid(row = idx+1, column = 1, sticky = NSEW, padx = 10, pady = 10)
    Button(current_frame, text = 'Clear', font=("Arial", 16), command = clear).grid(row = idx+1, column = 2, sticky = NSEW, padx = 10, pady = 10)
    Button(current_frame, text = 'Back', font=("Arial", 16), command = top_window).grid(row = idx+1, column = 3, sticky = NSEW, padx = 10, pady = 10)
    current_frame.pack(fill="both", expand=True)

def top_window():
    global current_frame, root
    
    current_state = ""
    current_frame.destroy()
    root.geometry('650x100')
    current_frame = Frame(root)
    Button(current_frame, text = 'Frequency Sweep', font=("Arial", 16), command = frequency_sweep).grid(row = 1, column = 0, sticky = W, padx = 20, pady = 10)
    Button(current_frame, text = 'Continuous Wave', font=("Arial", 16), command = continuous_wave).grid(row = 1, column = 1, sticky = W, padx = 20, pady = 10)
    Button(current_frame, text = 'Exit', font=("Arial", 16), command = exit_program).grid(row = 1, column = 3, sticky = W, padx = 20, pady = 10)
    current_frame.pack(fill="both", expand=True)



# used to display a message box describing the info
def showinfo(msgtitle, text, waittime):
    newroot = Tk()


    if waittime != None:
        newroot.after(waittime * 1000, newroot.destroy)
    else:
        # if waittime is None then we just quickly display the box and move on
        newroot.after(10, newroot.destroy)

    # make this window small so it can't be seen under the message box
    # there is no way to place the message box itself so we place the window
    newroot.geometry('10x10+200+200')

    # create and show the message box
    try:
        Message(title=msgtitle, message=text, master=newroot).show()
    except TclError:
        pass

# if something goes wrong go here
def cleanup():
    # kill the main window
    root.destroy


    # leave
    exit()

def exit_program():
    global port
    if DEBUG:
        print("exit program")
    exit()


def main(argv=None):
    global test, args, client_debug_level, client_verbose_level

    if argv is None:
        argv = sys.argv

    parser = argparse.ArgumentParser(description= HELP_DESCRIPTION)
    parser.add_argument('--server-ip-address', type=str, default="localhost", help='IP address of the server')

    # get the command line arguments
    args = parser.parse_args(argv[1:])

    root.geometry('550x350+100+200')
    root.resizable(True, True)
    root.bind('<Return>', enterhandler)

    #build client object
    test = testapp.TestApp()

    # connect to the server
    test.connectServer("127.0.0.1", 47479)

    top_window()

    root.mainloop()

if __name__ == '__main__':
      sys.exit(main())


