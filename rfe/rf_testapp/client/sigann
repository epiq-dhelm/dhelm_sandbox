#!/bin/python3

#---------Imports
import sys
from pprint import pprint
from datetime import datetime

pprint(sys.path)

import os
UTILPATH = os.path.abspath('util')
sys.path.append(UTILPATH)
import time
import math
import array as arr
from util import testapp

import tkinter as tk
from tkinter import ttk
from tkinter import *
from tkinter.messagebox import Message

import numpy as np
import matplotlib
matplotlib.use("tkagg")

import matplotlib.pyplot as plt
import matplotlib.animation as animation
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

from tkinter import Frame,Label,Entry,Button
#---------End of imports

IP = "127.0.0.1"
PORT = 47479



DEBUG = True

BAUDRATE = 500000

SPAN_SIZE_MHZ = 30           #Initialize settings
START_SCAN_MHZ = 985
STOP_SCAN_MHZ = START_SCAN_MHZ + SPAN_SIZE_MHZ
SWEEPPOINTS = 224
SWEEPDATA = (SWEEPPOINTS + 1) * 16
RESET = True

MinFreqMHZ = 500
MaxFreqMHZ = 6000
MaxSpanMHZ = 60

SpanMHz = SPAN_SIZE_MHZ 
StartFrequencyMHZ = START_SCAN_MHZ 
StopFrequencyMHZ = STOP_SCAN_MHZ 
CenterFreq = 1000 



# test settings to make sure they are valid
def ControlSettings():
    global SPAN_SIZE_MHZ
    """This functions check user settings
    """
    SpanSizeTemp = None
    StartFreqTemp = None
    StopFreqTemp =  None

    #print user settings
    if DEBUG:
        print("User settings:" + "Span: " + str(SPAN_SIZE_MHZ) +"MHz"+  " - " + "Start freq: " + str(START_SCAN_MHZ) +"MHz"+" - " + "Stop freq: " + str(STOP_SCAN_MHZ) + "MHz")

    #Control maximum Span size
    if(MaxSpanMHZ <= SPAN_SIZE_MHZ):
        showinfo("Error", "Invalid span size, Max is " + str(MaxSpanMHZ)+"MHz", 4)
    else:
        SpanMHZ = SPAN_SIZE_MHZ
        SpanSizeTemp = SpanMHZ
    if(SpanSizeTemp):
        #Control minimum start frequency
        if(MinFreqMHZ > START_SCAN_MHZ):
            if DEBUG:
                print("Min Start freq: " + str(MinFreqMHZ)+"MHz")
        else:
            StartFrequencyMHZ = START_SCAN_MHZ
            StartFreqTemp = StartFrequencyMHZ
        if(StartFreqTemp):
            #Control maximum stop frequency
            if(MaxFreqMHZ < STOP_SCAN_MHZ):
                if DEBUG:
                    print("Max Start freq: " + str(MaxFreqMHZ)+"MHz")
            else:
                if((StartFreqTemp + SpanSizeTemp) > STOP_SCAN_MHZ):
                    if DEBUG:
                        print("Max Stop freq (START_SCAN_MHZ + SPAN_SIZE_MHZ): " + str(STOP_SCAN_MHZ) +"MHz")
                else:
                    StopFreqTemp = (StartFreqTemp + SpanSizeTemp)

    return SpanSizeTemp, StartFreqTemp, StopFreqTemp

#This class creates the window to modify the frequency
class FreqWindow(Toplevel):

    def __init__(self, master = None):
        self.win = Toplevel

    #if the user hits enter while inside this window
    def enterhandler(self, e):
        if DEBUG:
            print("FreqWindow enterhandler")

        app.freqwindow.get_entry()


    # draw the new window
    def draw_window(self):
        global CenterFreq

        super().__init__(master = None)
        self.title("Frequency")
        self.geometry("600x200")
        self.columnconfigure(3, weight=2)
        freqlabel = Label(self, text ="Frequency (MHz): ", font=("Arial", 16));
        freqlabel.grid(row=0, column=0)
        
        self.freqentry = Entry(self, width = 15, font=("Arial", 16))
        self.freqentry.bind('<Return>', self.enterhandler)

        # put the cursor inside the entry
        self.freqentry.focus_set()
        CenterFreq = int(((START_SCAN_MHZ) + (SPAN_SIZE_MHZ / 2)) ) 
        self.freqentry.insert(1, str(CenterFreq))
        self.freqentry.grid(row=0, column=1)


    #The user hit enter
    def get_entry(self):
        global START_SCAN_MHZ, STOP_SCAN_MHZ, SPAN_SIZE_MHZ, StartFrequencyMHZ, StopFrequencyMHZ, CenterFreq 
       
        new_center = int(self.freqentry.get())

        new_start = new_center - (SPAN_SIZE_MHZ / 2)
        new_stop = new_center + (SPAN_SIZE_MHZ / 2)

        # validate that the new value is good
        if(MinFreqMHZ > new_start):
            msg = "Incorrect Start Frequency " + str(new_start) + " Min Start freq: " + str(MinFreqMHZ)+"MHz"
            showinfo("Error", msg, 4) 
            self.destroy()
            return 

        if(MaxFreqMHZ < new_stop):
            msg = "Incorrect Stop Frequency " + str(new_stop) + " Max Stop freq: " + str(MaxFreqMHZ)+"MHz"
            showinfo("Error", msg, 4) 
            self.destroy()
            return 
        
        START_SCAN_MHZ = new_start
        StartFrequencyMHZ = new_start
        STOP_SCAN_MHZ = new_stop
        StopFrequencyMHZ = new_stop
        CenterFreq = int(((START_SCAN_MHZ) + (SPAN_SIZE_MHZ / 2)) ) 


        # delete the freq window
        self.destroy()

        #start all over with a new window
        app.init_window(content)

# This class creates the window to modify the span
class SpanWindow(Toplevel):

    def __init__(self, master = None):
        self.win = Toplevel

    # called when a user hits enter
    def enterhandler(self, e):
        if DEBUG:
            print("SpanWindow enterhandler")

        app.spanwindow.get_entry()

   
    # draw the window
    def draw_window(self):
        super().__init__(master = None)
        self.title("Span")
        self.geometry("400x400")
        self.columnconfigure(3, weight=2)
        spanlabel = Label(self, text ="Span (Mhz): ", font=("Arial", 16));
        spanlabel.grid(row=0, column=0)
        
        self.spanentry = Entry(self, width = 15, font=("Arial", 16))
        self.spanentry.bind('<Return>', self.enterhandler)
        self.spanentry.focus_set()
        span = SPAN_SIZE_MHZ 
        self.spanentry.insert(1, str(span))
        self.spanentry.grid(row=0, column=1)

    def get_entry(self):
        global START_SCAN_MHZ, STOP_SCAN_MHZ, SPAN_SIZE_MHZ

        new_span = int(self.spanentry.get())

        center = STOP_SCAN_MHZ - (SPAN_SIZE_MHZ / 2)

        START_SCAN_MHZ = center - (new_span / 2)
        STOP_SCAN_MHZ = center + (new_span / 2)

        SPAN_SIZE_MHZ = new_span
        app.init_window(content)

        self.win.destroy(self)

        # start all over with a new window with these parameters
        app.init_window(content)
"""
    # the user hit enter in this window
    def get_entry(self):
        global START_SCAN_MHZ, STOP_SCAN_MHZ, SPAN_SIZE_MHZ
       
        new_span = int(self.spanentry.get())

        # Validate the span
        if(MaxSpanMHZ <= new_span):
            showinfo("Error", "Invalid span size, Max is " + str(MaxSpanMHZ)+"MHz", 4)
            self.destroy()
            return 

        # calculate the new start and stop freq from the span
        new_center = new_span / 2

        new_start = new_center - (new_span / 2)
        new_stop = new_center + (new_span / 2)

        # validate that the new value is good
        if(MinFreqMHZ > new_start):
            msg = "Incorrect Start Frequency " + str(new_start) + " Min Start freq: " + str(MinFreqMHZ)+"MHz"
            showinfo("Error", msg, 4) 
            self.destroy()
            return 

        if(MaxFreqMHZ < new_stop):
            msg = "Incorrect Stop Frequency " + str(new_stop) + " Max Stop freq: " + str(MaxFreqMHZ)+"MHz"
            showinfo("Error", msg, 4) 
            self.destroy()
            return 
        
        START_SCAN_MHZ = new_start
        STOP_SCAN_MHZ = new_stop
        SPAN_SIZE_MHZ = new_span

        # delete this window
        self.destroy()

        # start all over with a new window with these parameters
        app.init_window(content)
    """

# this is the main window
class Window(Frame):
    def __init__(self, master = None):
        Frame.__init__(self, master)
        self.master = master

        #get and store the two windows that update things
        self.freqwindow = FreqWindow(self.master)
        self.spanwindow = SpanWindow(self.master)


    # this is called by matplotlib's animate loop animate.FuncAnimation()
    # it is called every 40ms
    def animate(self,i):
        self.objSweep=None

        self.amp = arr.array('f',[SWEEPPOINTS])
        self.freq = arr.array('f',[SWEEPPOINTS])
        # extract the freq and amp arrays from the data
        resp, self.freq, self.amp = test.sendGetData((CenterFreq), SPAN_SIZE_MHZ)

        if DEBUG:
            if i % 300 == 0:
                print("in animate")
                print("config start", StartFrequencyMHZ, "config stop ", StopFrequencyMHZ )
                print("Freq min ", min(self.freq), " max ", max(self.freq))
                print("Amp min ", min(self.amp), " max ", max(self.amp))

        self.line.set_ydata(self.amp)  # update the data
        self.line.set_xdata(self.freq)  # update the data

        # display the peak value arrow
        self.ann.remove()
        ymax = max(self.amp)
        ymax_str = "{:.2f}".format(ymax)

        # get the position in the array of the ymax value
        xpos = np.argmax(self.amp)
        xmax = self.freq[xpos]

        xtextpos = 20
        ytextpos = 20
        
        # make sure the text goes on the left side when it is pointing 
        # near the right side of the plot
        greater_textsize = 200
        if xpos > SWEEPPOINTS - 10:
            xtextpos = - greater_textsize
        
       
        # get the frequency with 3 decimal places
        xmax_int = int(xmax * 1000)
        xmax = xmax_int / 1000 
       
        # display the peak text and arrow
        display_text = "x = " + str((xmax)) + " y = " + ymax_str
        self.ann = self.ax.annotate(display_text, xy=(xmax, ymax), 
                textcoords='offset pixels', xytext=(xtextpos, ytextpos), 
                arrowprops=dict(arrowstyle="->", facecolor='black'),)

        return self.line,


    # initialize the main window
    def init_window(self, content):
        self.objSweep=None
        # store the freq and span window
        self.freqwindow = FreqWindow(self.master)
        self.spanwindow = SpanWindow(self.master)
        
        self.buttonFreq = Button(content,text="Frequency")
        # Following line will bind click event
        # On any click left / right button
        # of mouse a new window will be opened
        self.buttonFreq.bind("<Button>",
                 lambda e: self.freqwindow.draw_window())
        self.buttonFreq.grid(row=0,column=3, sticky= 'nsew')

        self.buttonSpan = Button(content,text="Span")
        self.buttonSpan.bind("<Button>",
                 lambda e: self.spanwindow.draw_window())
        self.buttonSpan.grid(row=1,column=3, sticky='nsew')

        # create the inner canvas to display plot to
        self.fig = plt.Figure()
        self.ax = self.fig.add_subplot(111)
        self.canvas = FigureCanvasTkAgg(self.fig, master=frame)
        self.canvas.get_tk_widget().grid(column=0,row=0, sticky = 'nsew')

        # build the plot
        self.build_plot(frame)


    def build_plot(self, frame):
        # these things must be done before you can start processing the sweeppoints
        

        #Verify the Control settings
        SpanSize, StartFreq, StopFreq = ControlSettings()

        if(SpanSize and StartFreq and StopFreq):
            nInd = 0

            # display the new config info
            if DEBUG:
                print("config min", StartFreq, "config max ", StopFreq )

            self.amp = arr.array('f',[SWEEPPOINTS])
            self.freq = arr.array('f',[SWEEPPOINTS])

            resp, self.freq, self.amp = test.sendGetData((CenterFreq), SPAN_SIZE_MHZ)


            if DEBUG:
                print("Freq min ", min(self.freq), " max ", max(self.freq))
                print("Amp min ", min(self.amp), " max ", max(self.amp))

            # build the plot
            self.line, = self.ax.plot(self.freq, self.amp)        
            self.ax.axis([StartFreq, StopFreq, min(self.amp) - 10, 0 ])

            # create the annotation
            ymax = max(self.amp)
            ymax_str = "{:.2f}".format(ymax)
            xpos = np.argmax(self.amp)
            xmax = self.freq[xpos]
            display_text = "x = " + str(int(xmax)) + " y = " + ymax_str 
            self.ann = self.ax.annotate(display_text, xy=(xmax, ymax), 
                    xytext=(xmax+5, ymax + 5), arrowprops=dict(arrowstyle="->", 
                    facecolor='black'),)
        else:
            if DEBUG:
                print("Error: settings are wrong.\nPlease, change and try again")
        

        self.ani = animation.FuncAnimation(self.fig, self.animate, None, interval=100, blit=False)


# used to display a message box describing the info
def showinfo(msgtitle, text, waittime):
    newroot = Tk()

    
    if waittime != None:
        newroot.after(waittime * 1000, newroot.destroy)
    else:
        # if waittime is None then we just quickly display the box and move on
        newroot.after(10, newroot.destroy)

    # make this window small so it can't be seen under the message box
    # there is no way to place the message box itself so we place the window
    newroot.geometry('10x10+200+200')

    # create and show the message box
    try:
        Message(title=msgtitle, message=text, master=newroot).show()
    except TclError:
        pass

# build the bottom layer window
def build_window():
    global content, frame

    # destroy it if it already exists
    current_frame.destroy()

    root.geometry("800x500")

    # make the inner frame that holds the plot
    content = ttk.Frame(root, padding=(3,3,12,12))

    # make the outer frame with a ridge
    frame = ttk.Frame(content, borderwidth=5, relief="ridge", width=200, height=100)

    content.grid(column=0, row=0, sticky='nsew')
    frame.grid(column=0, row=0, columnspan=3, rowspan=2, sticky='nsew')

    # setup all the configuration of the rows and columns
    root.columnconfigure(0, weight=1)
    root.rowconfigure(0, weight=1)
    frame.columnconfigure(0, weight=1)
    frame.rowconfigure(0, weight=1)
    content.columnconfigure(0, weight=3)
    content.columnconfigure(1, weight=3)
    content.columnconfigure(2, weight=3)
    content.columnconfigure(3, weight=1)
    content.rowconfigure(0, weight=1)
    content.rowconfigure(1, weight=1)

   
    return content, frame

# if something goes wrong go here
def cleanup():
    # kill the main window
    root.destroy

    # leave
    exit()


# this has to be the same as in the sigann.desktop file inside /usr/share/applications/
# so it can be selected by the Ubuntu chooser
root = Tk(className='annName')

# main window title and location
root.wm_title('Sidekiq Signal Analyzer')
root.geometry('550x350+100+200')

# bind the enterhandler to the Return key in the main window.
#root.bind('<Return>', enterhandler)

test = testapp.TestApp()

# connect to the server
test.connectServer(IP, PORT)

test.setServerDebug("ERROR")

# unsure here
current_frame = Frame(root)
app = Window(root)

# build the main window
content, frame = build_window()

# initialize the main window
app.init_window(content)


# spin on the tkinter mainloop
tk.mainloop()

